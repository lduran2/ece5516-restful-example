#!/usr/bin/env node
// ./server
// Creates a server that allows reading and updating the number of
// students at any school at Temple.
//
// By        : Leomar Dur√°n <https://github.com/lduran2/>
// When      : 2021-05-02t14:37
// For       : ECE 5516
// Version   : 1.4.1
//
// Changelog :
// 	v1.4 - 2021-05-02t14:37
// 		charset for all content-types
//
// 	v1.4 - 2021-05-02t05:32
// 		PUT can update or add a new school
// 		implemented PUT to update the number of students per school
// 		use const where possible, also 'use strict'
// 		abstacted readtoEndon
//
//	v1.3 - 2021-05-01t23:19
//		used handleReadMoreFiles to simplify get index
//
//	v1.2 - 2021-05-01t21:56
//		used handleReadFile to handle errors, logging
//
//	v1.1 - 2021-05-01t21:49
//		serving index to choose read or update
//
//	v1.0 - 2021-05-01t02:44
//		started working on the server for reading
//

'use strict';

const fs = require('fs');			// for readFile
const bodyParser = require('body-parser');	// for json, urlencoded

// create the server app
const APP = require('express')();
APP.readtoEndon = setReadtoEndon;
APP.use(bodyParser.json());
APP.use(bodyParser.urlencoded({ extended: true }));

// #port to listen to
const PORT_NO = 8080;
// OK and created header statuses
const HEADER_OK = 200;
const HEADER_CREATED = 201;
// types of content to send
const PLAIN_TEXT_CONTENT = { 'Content-Type' : 'text/plain; charset=UTF-8' };
const HYPER_TEXT_CONTENT = { 'Content-Type' : 'text/html; charset=UTF-8' };
const JAVASCRIPT_CONTENT = { 'Content-Type' : 'text/javascript' };

// set up APP's get index
APP.get('/', function (_, response) {
	console.log('requested /');
	// open the index, students and template files
	handleReadMoreFiles(['index.html', 'students.json', 'school-option-template.html'], [], [],
		function onReadingforIndex(_, index, students, option) {
			// option templating, replace each $school_name in option
			const TEMPLATE = String.prototype.replace.bind(option, /\$school_name/g);
			// parse the option template
			const CONTENT = index				// in the index file,
				.replace(/\$schools/g,			// replace each $schools
					Object.keys(			// with each key
						JSON.parse(students))	// in the parsed students,
					.map(TEMPLATE)			// templated,
					.join(''))			// joined as 1 string
			;
			// send plain text with OK status header
			response.writeHead(HEADER_OK, HYPER_TEXT_CONTENT);
			// send the data read
			response.end(CONTENT);
		} // function onReadingforIndex(err, index, students, option) */
	); // handleReadMoreFiles(['index.html', ... 
}); // APP.get('/', ..

// set up the APP's get /list-students/ and /update-students.js
APP.readtoEndon(APP.get, '/list-students/', 'students.json', PLAIN_TEXT_CONTENT);
APP.readtoEndon(APP.get, '/add-update-students.js', 'add-update-students.js', JAVASCRIPT_CONTENT);

APP.put('/update-students/', function (request, response) {
	console.log('requested /update-students/');
	console.log('received', request.body);
	// parse the request body
	console.log(request.body);
	// open and read student file
	handleReadFile('students.json', function (err, rData) {
		// parse the student file data
		const PDATA = JSON.parse(rData);
		// get the school from the request
		const SCHOOL = request.body['school'];
		// check if the school already exists for response status
		const HEADER_STATUS = (PDATA.hasOwnProperty(SCHOOL) ? HEADER_OK : HEADER_CREATED);
		// update that school in the student data
		PDATA[SCHOOL] = request.body['n_students'];
		// write the updated data
		fs.writeFile('students.json', JSON.stringify(PDATA), function (err) {
			// log error and stop if error
			if (err) return console.error(err);
			console.log('updated students.json');
			// respond the update too
			response.writeHead(HEADER_STATUS, PLAIN_TEXT_CONTENT);
			response.end(['updated', SCHOOL, 'to', PDATA[SCHOOL], 'students'].join(' '));
		});

	}); // handleReadFile('students.json', ...
});

// start the SERVER listening
const SERVER = APP.listen(PORT_NO, function () {
	// report the host address and port
	const HOST = SERVER.address().address;
	const PORT = SERVER.address().port;
	console.log('student app listening at http://%s:%s . . .',
		HOST, PORT
	);
}); // APP.listen(PORT_NO ... )

console.log('Done.');

/// handles errors, logging while reading a file
function handleReadFile(file, callback) {
	// open and read the file
	fs.readFile(file, 'utf8', function (err, data) {
		// log error and stop if error
		if (err) return console.error(err);
		console.log('read', file);
		callback(err, data);
		console.log('sent the response');
	}); // fs.readFile(file, ...
} // function handleReadFile(file, callback)

/// handles errors, logging while reading all files in array files
function handleReadMoreFiles(files, errArr, dataArr, callback) {
	// shift file 0
	const FILE0 = files.shift();

	// base case: if file 0 defined
	if (!FILE0) {
		// if no file 0, then callback
		return callback(errArr, ...dataArr);
	} // if (!file0)

	// inductive step: read the file
	handleReadFile(FILE0, function (err, data) {
		// push the error message and data
		errArr.push(err);
		dataArr.push(data);
		// read the next file
		handleReadMoreFiles(files, errArr, dataArr, callback);
	}); // handleReadFile(file0, ...
} // function handleReadMoreFiles(files, errArr, dataArr, callback)

/// creates a callback that reads a file and sends it in response to a
/// resource request
function setReadtoEndon(eventfunc, resource, file, contentType) {
	// bind the event function with its event object
	return eventfunc.bind(this)(resource, 
		function callback(_, response) {
			console.log('requested', resource);
			// open and read the students file
			handleReadFile(file, function (_, data) {
				// send plain text with OK status header
				response.writeHead(HEADER_OK, contentType);
				// send the data read
				response.end(data.toString());
			}); // handleReadFile('students.json', ...
		} // return function callback(_, response)
	); // eventfunc.bind(this)(resource, ...
} // function setReadtoEndon(resource, file, contentType)

